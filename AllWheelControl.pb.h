// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllWheelControl.proto

#ifndef PROTOBUF_AllWheelControl_2eproto__INCLUDED
#define PROTOBUF_AllWheelControl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lunabotics {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllWheelControl_2eproto();
void protobuf_AssignDesc_AllWheelControl_2eproto();
void protobuf_ShutdownFile_AllWheelControl_2eproto();

class AllWheelControl;
class AllWheelControl_Wheels;

// ===================================================================

class AllWheelControl_Wheels : public ::google::protobuf::Message {
 public:
  AllWheelControl_Wheels();
  virtual ~AllWheelControl_Wheels();

  AllWheelControl_Wheels(const AllWheelControl_Wheels& from);

  inline AllWheelControl_Wheels& operator=(const AllWheelControl_Wheels& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllWheelControl_Wheels& default_instance();

  void Swap(AllWheelControl_Wheels* other);

  // implements Message ----------------------------------------------

  AllWheelControl_Wheels* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllWheelControl_Wheels& from);
  void MergeFrom(const AllWheelControl_Wheels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left_front = 1;
  inline bool has_left_front() const;
  inline void clear_left_front();
  static const int kLeftFrontFieldNumber = 1;
  inline float left_front() const;
  inline void set_left_front(float value);

  // required float right_front = 2;
  inline bool has_right_front() const;
  inline void clear_right_front();
  static const int kRightFrontFieldNumber = 2;
  inline float right_front() const;
  inline void set_right_front(float value);

  // required float left_rear = 3;
  inline bool has_left_rear() const;
  inline void clear_left_rear();
  static const int kLeftRearFieldNumber = 3;
  inline float left_rear() const;
  inline void set_left_rear(float value);

  // required float right_rear = 4;
  inline bool has_right_rear() const;
  inline void clear_right_rear();
  static const int kRightRearFieldNumber = 4;
  inline float right_rear() const;
  inline void set_right_rear(float value);

  // @@protoc_insertion_point(class_scope:lunabotics.AllWheelControl.Wheels)
 private:
  inline void set_has_left_front();
  inline void clear_has_left_front();
  inline void set_has_right_front();
  inline void clear_has_right_front();
  inline void set_has_left_rear();
  inline void clear_has_left_rear();
  inline void set_has_right_rear();
  inline void clear_has_right_rear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float left_front_;
  float right_front_;
  float left_rear_;
  float right_rear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AllWheelControl_2eproto();
  friend void protobuf_AssignDesc_AllWheelControl_2eproto();
  friend void protobuf_ShutdownFile_AllWheelControl_2eproto();

  void InitAsDefaultInstance();
  static AllWheelControl_Wheels* default_instance_;
};
// -------------------------------------------------------------------

class AllWheelControl : public ::google::protobuf::Message {
 public:
  AllWheelControl();
  virtual ~AllWheelControl();

  AllWheelControl(const AllWheelControl& from);

  inline AllWheelControl& operator=(const AllWheelControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllWheelControl& default_instance();

  void Swap(AllWheelControl* other);

  // implements Message ----------------------------------------------

  AllWheelControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllWheelControl& from);
  void MergeFrom(const AllWheelControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AllWheelControl_Wheels Wheels;

  // accessors -------------------------------------------------------

  // required .lunabotics.AllWheelControl.Wheels steering = 1;
  inline bool has_steering() const;
  inline void clear_steering();
  static const int kSteeringFieldNumber = 1;
  inline const ::lunabotics::AllWheelControl_Wheels& steering() const;
  inline ::lunabotics::AllWheelControl_Wheels* mutable_steering();
  inline ::lunabotics::AllWheelControl_Wheels* release_steering();
  inline void set_allocated_steering(::lunabotics::AllWheelControl_Wheels* steering);

  // required .lunabotics.AllWheelControl.Wheels driving = 2;
  inline bool has_driving() const;
  inline void clear_driving();
  static const int kDrivingFieldNumber = 2;
  inline const ::lunabotics::AllWheelControl_Wheels& driving() const;
  inline ::lunabotics::AllWheelControl_Wheels* mutable_driving();
  inline ::lunabotics::AllWheelControl_Wheels* release_driving();
  inline void set_allocated_driving(::lunabotics::AllWheelControl_Wheels* driving);

  // @@protoc_insertion_point(class_scope:lunabotics.AllWheelControl)
 private:
  inline void set_has_steering();
  inline void clear_has_steering();
  inline void set_has_driving();
  inline void clear_has_driving();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::lunabotics::AllWheelControl_Wheels* steering_;
  ::lunabotics::AllWheelControl_Wheels* driving_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AllWheelControl_2eproto();
  friend void protobuf_AssignDesc_AllWheelControl_2eproto();
  friend void protobuf_ShutdownFile_AllWheelControl_2eproto();

  void InitAsDefaultInstance();
  static AllWheelControl* default_instance_;
};
// ===================================================================


// ===================================================================

// AllWheelControl_Wheels

// required float left_front = 1;
inline bool AllWheelControl_Wheels::has_left_front() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllWheelControl_Wheels::set_has_left_front() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllWheelControl_Wheels::clear_has_left_front() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllWheelControl_Wheels::clear_left_front() {
  left_front_ = 0;
  clear_has_left_front();
}
inline float AllWheelControl_Wheels::left_front() const {
  return left_front_;
}
inline void AllWheelControl_Wheels::set_left_front(float value) {
  set_has_left_front();
  left_front_ = value;
}

// required float right_front = 2;
inline bool AllWheelControl_Wheels::has_right_front() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllWheelControl_Wheels::set_has_right_front() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllWheelControl_Wheels::clear_has_right_front() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllWheelControl_Wheels::clear_right_front() {
  right_front_ = 0;
  clear_has_right_front();
}
inline float AllWheelControl_Wheels::right_front() const {
  return right_front_;
}
inline void AllWheelControl_Wheels::set_right_front(float value) {
  set_has_right_front();
  right_front_ = value;
}

// required float left_rear = 3;
inline bool AllWheelControl_Wheels::has_left_rear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllWheelControl_Wheels::set_has_left_rear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllWheelControl_Wheels::clear_has_left_rear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllWheelControl_Wheels::clear_left_rear() {
  left_rear_ = 0;
  clear_has_left_rear();
}
inline float AllWheelControl_Wheels::left_rear() const {
  return left_rear_;
}
inline void AllWheelControl_Wheels::set_left_rear(float value) {
  set_has_left_rear();
  left_rear_ = value;
}

// required float right_rear = 4;
inline bool AllWheelControl_Wheels::has_right_rear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllWheelControl_Wheels::set_has_right_rear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllWheelControl_Wheels::clear_has_right_rear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllWheelControl_Wheels::clear_right_rear() {
  right_rear_ = 0;
  clear_has_right_rear();
}
inline float AllWheelControl_Wheels::right_rear() const {
  return right_rear_;
}
inline void AllWheelControl_Wheels::set_right_rear(float value) {
  set_has_right_rear();
  right_rear_ = value;
}

// -------------------------------------------------------------------

// AllWheelControl

// required .lunabotics.AllWheelControl.Wheels steering = 1;
inline bool AllWheelControl::has_steering() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllWheelControl::set_has_steering() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllWheelControl::clear_has_steering() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllWheelControl::clear_steering() {
  if (steering_ != NULL) steering_->::lunabotics::AllWheelControl_Wheels::Clear();
  clear_has_steering();
}
inline const ::lunabotics::AllWheelControl_Wheels& AllWheelControl::steering() const {
  return steering_ != NULL ? *steering_ : *default_instance_->steering_;
}
inline ::lunabotics::AllWheelControl_Wheels* AllWheelControl::mutable_steering() {
  set_has_steering();
  if (steering_ == NULL) steering_ = new ::lunabotics::AllWheelControl_Wheels;
  return steering_;
}
inline ::lunabotics::AllWheelControl_Wheels* AllWheelControl::release_steering() {
  clear_has_steering();
  ::lunabotics::AllWheelControl_Wheels* temp = steering_;
  steering_ = NULL;
  return temp;
}
inline void AllWheelControl::set_allocated_steering(::lunabotics::AllWheelControl_Wheels* steering) {
  delete steering_;
  steering_ = steering;
  if (steering) {
    set_has_steering();
  } else {
    clear_has_steering();
  }
}

// required .lunabotics.AllWheelControl.Wheels driving = 2;
inline bool AllWheelControl::has_driving() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllWheelControl::set_has_driving() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllWheelControl::clear_has_driving() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllWheelControl::clear_driving() {
  if (driving_ != NULL) driving_->::lunabotics::AllWheelControl_Wheels::Clear();
  clear_has_driving();
}
inline const ::lunabotics::AllWheelControl_Wheels& AllWheelControl::driving() const {
  return driving_ != NULL ? *driving_ : *default_instance_->driving_;
}
inline ::lunabotics::AllWheelControl_Wheels* AllWheelControl::mutable_driving() {
  set_has_driving();
  if (driving_ == NULL) driving_ = new ::lunabotics::AllWheelControl_Wheels;
  return driving_;
}
inline ::lunabotics::AllWheelControl_Wheels* AllWheelControl::release_driving() {
  clear_has_driving();
  ::lunabotics::AllWheelControl_Wheels* temp = driving_;
  driving_ = NULL;
  return temp;
}
inline void AllWheelControl::set_allocated_driving(::lunabotics::AllWheelControl_Wheels* driving) {
  delete driving_;
  driving_ = driving;
  if (driving) {
    set_has_driving();
  } else {
    clear_has_driving();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lunabotics

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllWheelControl_2eproto__INCLUDED
