// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Telemetry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lunabotics {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Telemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_State_AckermannTelemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_State_AckermannTelemetry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_State_PointTurnTelemetry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_State_PointTurnTelemetry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_World_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_LaserScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_LaserScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telemetry_Geometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telemetry_Geometry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Telemetry_PointTurnState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Telemetry_2eproto() {
  protobuf_AddDesc_Telemetry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Telemetry.proto");
  GOOGLE_CHECK(file != NULL);
  Telemetry_descriptor_ = file->message_type(0);
  static const int Telemetry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, state_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, world_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, path_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, laser_scan_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, all_wheel_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, geometry_data_),
  };
  Telemetry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_descriptor_,
      Telemetry::default_instance_,
      Telemetry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry));
  Telemetry_State_descriptor_ = Telemetry_descriptor_->nested_type(0);
  static const int Telemetry_State_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, velocities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, steering_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, autonomy_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, next_waypoint_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, icr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, ackermann_telemetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, point_turn_telemetry_),
  };
  Telemetry_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_State_descriptor_,
      Telemetry_State::default_instance_,
      Telemetry_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_State));
  Telemetry_State_AckermannTelemetry_descriptor_ = Telemetry_State_descriptor_->nested_type(0);
  static const int Telemetry_State_AckermannTelemetry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, pid_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, closest_trajectory_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, velocity_vector_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, closest_trajectory_local_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, velocity_vector_local_point_),
  };
  Telemetry_State_AckermannTelemetry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_State_AckermannTelemetry_descriptor_,
      Telemetry_State_AckermannTelemetry::default_instance_,
      Telemetry_State_AckermannTelemetry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_AckermannTelemetry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_State_AckermannTelemetry));
  Telemetry_State_PointTurnTelemetry_descriptor_ = Telemetry_State_descriptor_->nested_type(1);
  static const int Telemetry_State_PointTurnTelemetry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_PointTurnTelemetry, state_),
  };
  Telemetry_State_PointTurnTelemetry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_State_PointTurnTelemetry_descriptor_,
      Telemetry_State_PointTurnTelemetry::default_instance_,
      Telemetry_State_PointTurnTelemetry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_PointTurnTelemetry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_State_PointTurnTelemetry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_State_PointTurnTelemetry));
  Telemetry_World_descriptor_ = Telemetry_descriptor_->nested_type(1);
  static const int Telemetry_World_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, cell_),
  };
  Telemetry_World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_World_descriptor_,
      Telemetry_World::default_instance_,
      Telemetry_World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_World));
  Telemetry_Path_descriptor_ = Telemetry_descriptor_->nested_type(2);
  static const int Telemetry_Path_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Path, position_),
  };
  Telemetry_Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_Path_descriptor_,
      Telemetry_Path::default_instance_,
      Telemetry_Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_Path));
  Telemetry_LaserScan_descriptor_ = Telemetry_descriptor_->nested_type(3);
  static const int Telemetry_LaserScan_offsets_[1] = {
  };
  Telemetry_LaserScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_LaserScan_descriptor_,
      Telemetry_LaserScan::default_instance_,
      Telemetry_LaserScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_LaserScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_LaserScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_LaserScan));
  Telemetry_Geometry_descriptor_ = Telemetry_descriptor_->nested_type(4);
  static const int Telemetry_Geometry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, left_front_joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, left_rear_joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, right_front_joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, right_rear_joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, wheel_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, wheel_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, wheel_width_),
  };
  Telemetry_Geometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telemetry_Geometry_descriptor_,
      Telemetry_Geometry::default_instance_,
      Telemetry_Geometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telemetry_Geometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telemetry_Geometry));
  Telemetry_PointTurnState_descriptor_ = Telemetry_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Telemetry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_descriptor_, &Telemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_State_descriptor_, &Telemetry_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_State_AckermannTelemetry_descriptor_, &Telemetry_State_AckermannTelemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_State_PointTurnTelemetry_descriptor_, &Telemetry_State_PointTurnTelemetry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_World_descriptor_, &Telemetry_World::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_Path_descriptor_, &Telemetry_Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_LaserScan_descriptor_, &Telemetry_LaserScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telemetry_Geometry_descriptor_, &Telemetry_Geometry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Telemetry_2eproto() {
  delete Telemetry::default_instance_;
  delete Telemetry_reflection_;
  delete Telemetry_State::default_instance_;
  delete Telemetry_State_reflection_;
  delete Telemetry_State_AckermannTelemetry::default_instance_;
  delete Telemetry_State_AckermannTelemetry_reflection_;
  delete Telemetry_State_PointTurnTelemetry::default_instance_;
  delete Telemetry_State_PointTurnTelemetry_reflection_;
  delete Telemetry_World::default_instance_;
  delete Telemetry_World_reflection_;
  delete Telemetry_Path::default_instance_;
  delete Telemetry_Path_reflection_;
  delete Telemetry_LaserScan::default_instance_;
  delete Telemetry_LaserScan_reflection_;
  delete Telemetry_Geometry::default_instance_;
  delete Telemetry_Geometry_reflection_;
}

void protobuf_AddDesc_Telemetry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lunabotics::proto::protobuf_AddDesc_SteeringModeType_2eproto();
  ::lunabotics::proto::protobuf_AddDesc_Point_2eproto();
  ::lunabotics::proto::protobuf_AddDesc_Twist_2eproto();
  ::lunabotics::proto::protobuf_AddDesc_AllWheelState_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Telemetry.proto\022\020lunabotics.proto\032\026Ste"
    "eringModeType.proto\032\013Point.proto\032\013Twist."
    "proto\032\023AllWheelState.proto\"\343\014\n\tTelemetry"
    "\0225\n\nstate_data\030\002 \001(\0132!.lunabotics.proto."
    "Telemetry.State\0225\n\nworld_data\030\003 \001(\0132!.lu"
    "nabotics.proto.Telemetry.World\0223\n\tpath_d"
    "ata\030\004 \001(\0132 .lunabotics.proto.Telemetry.P"
    "ath\022>\n\017laser_scan_data\030\005 \001(\0132%.lunabotic"
    "s.proto.Telemetry.LaserScan\0228\n\017all_wheel"
    "_state\030\006 \001(\0132\037.lunabotics.proto.AllWheel"
    "State\022;\n\rgeometry_data\030\007 \001(\0132$.lunabotic"
    "s.proto.Telemetry.Geometry\032\232\006\n\005State\022)\n\010"
    "position\030\001 \002(\0132\027.lunabotics.proto.Point\022"
    "\017\n\007heading\030\002 \002(\002\022+\n\nvelocities\030\003 \002(\0132\027.l"
    "unabotics.proto.Twist\0229\n\rsteering_mode\030\004"
    " \002(\0162\".lunabotics.proto.SteeringModeType"
    "\022\030\n\020autonomy_enabled\030\005 \002(\010\022\031\n\021next_waypo"
    "int_idx\030\006 \001(\005\022$\n\003icr\030\007 \001(\0132\027.lunabotics."
    "proto.Point\022Q\n\023ackermann_telemetry\030\010 \001(\013"
    "24.lunabotics.proto.Telemetry.State.Acke"
    "rmannTelemetry\022R\n\024point_turn_telemetry\030\t"
    " \001(\01324.lunabotics.proto.Telemetry.State."
    "PointTurnTelemetry\032\231\002\n\022AckermannTelemetr"
    "y\022\021\n\tpid_error\030\001 \002(\002\0229\n\030closest_trajecto"
    "ry_point\030\002 \002(\0132\027.lunabotics.proto.Point\022"
    "6\n\025velocity_vector_point\030\003 \002(\0132\027.lunabot"
    "ics.proto.Point\022\?\n\036closest_trajectory_lo"
    "cal_point\030\004 \002(\0132\027.lunabotics.proto.Point"
    "\022<\n\033velocity_vector_local_point\030\005 \002(\0132\027."
    "lunabotics.proto.Point\032O\n\022PointTurnTelem"
    "etry\0229\n\005state\030\001 \002(\0162*.lunabotics.proto.T"
    "elemetry.PointTurnState\032L\n\005World\022\r\n\005widt"
    "h\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\022\n\nresolution\030\003 "
    "\002(\002\022\020\n\004cell\030\004 \003(\005B\002\020\001\0321\n\004Path\022)\n\010positio"
    "n\030\001 \003(\0132\027.lunabotics.proto.Point\032\013\n\tLase"
    "rScan\032\227\002\n\010Geometry\0221\n\020left_front_joint\030\001"
    " \002(\0132\027.lunabotics.proto.Point\0220\n\017left_re"
    "ar_joint\030\002 \002(\0132\027.lunabotics.proto.Point\022"
    "2\n\021right_front_joint\030\003 \002(\0132\027.lunabotics."
    "proto.Point\0221\n\020right_rear_joint\030\004 \002(\0132\027."
    "lunabotics.proto.Point\022\024\n\014wheel_offset\030\005"
    " \002(\002\022\024\n\014wheel_radius\030\006 \002(\002\022\023\n\013wheel_widt"
    "h\030\007 \002(\002\"7\n\016PointTurnState\022\013\n\007STOPPED\020\001\022\013"
    "\n\007DRIVING\020\002\022\013\n\007TURNING\020\003", 1744);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Telemetry.proto", &protobuf_RegisterTypes);
  Telemetry::default_instance_ = new Telemetry();
  Telemetry_State::default_instance_ = new Telemetry_State();
  Telemetry_State_AckermannTelemetry::default_instance_ = new Telemetry_State_AckermannTelemetry();
  Telemetry_State_PointTurnTelemetry::default_instance_ = new Telemetry_State_PointTurnTelemetry();
  Telemetry_World::default_instance_ = new Telemetry_World();
  Telemetry_Path::default_instance_ = new Telemetry_Path();
  Telemetry_LaserScan::default_instance_ = new Telemetry_LaserScan();
  Telemetry_Geometry::default_instance_ = new Telemetry_Geometry();
  Telemetry::default_instance_->InitAsDefaultInstance();
  Telemetry_State::default_instance_->InitAsDefaultInstance();
  Telemetry_State_AckermannTelemetry::default_instance_->InitAsDefaultInstance();
  Telemetry_State_PointTurnTelemetry::default_instance_->InitAsDefaultInstance();
  Telemetry_World::default_instance_->InitAsDefaultInstance();
  Telemetry_Path::default_instance_->InitAsDefaultInstance();
  Telemetry_LaserScan::default_instance_->InitAsDefaultInstance();
  Telemetry_Geometry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Telemetry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Telemetry_2eproto {
  StaticDescriptorInitializer_Telemetry_2eproto() {
    protobuf_AddDesc_Telemetry_2eproto();
  }
} static_descriptor_initializer_Telemetry_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Telemetry_PointTurnState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_PointTurnState_descriptor_;
}
bool Telemetry_PointTurnState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Telemetry_PointTurnState Telemetry::STOPPED;
const Telemetry_PointTurnState Telemetry::DRIVING;
const Telemetry_PointTurnState Telemetry::TURNING;
const Telemetry_PointTurnState Telemetry::PointTurnState_MIN;
const Telemetry_PointTurnState Telemetry::PointTurnState_MAX;
const int Telemetry::PointTurnState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Telemetry_State_AckermannTelemetry::kPidErrorFieldNumber;
const int Telemetry_State_AckermannTelemetry::kClosestTrajectoryPointFieldNumber;
const int Telemetry_State_AckermannTelemetry::kVelocityVectorPointFieldNumber;
const int Telemetry_State_AckermannTelemetry::kClosestTrajectoryLocalPointFieldNumber;
const int Telemetry_State_AckermannTelemetry::kVelocityVectorLocalPointFieldNumber;
#endif  // !_MSC_VER

Telemetry_State_AckermannTelemetry::Telemetry_State_AckermannTelemetry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_State_AckermannTelemetry::InitAsDefaultInstance() {
  closest_trajectory_point_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  velocity_vector_point_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  closest_trajectory_local_point_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  velocity_vector_local_point_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
}

Telemetry_State_AckermannTelemetry::Telemetry_State_AckermannTelemetry(const Telemetry_State_AckermannTelemetry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_State_AckermannTelemetry::SharedCtor() {
  _cached_size_ = 0;
  pid_error_ = 0;
  closest_trajectory_point_ = NULL;
  velocity_vector_point_ = NULL;
  closest_trajectory_local_point_ = NULL;
  velocity_vector_local_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_State_AckermannTelemetry::~Telemetry_State_AckermannTelemetry() {
  SharedDtor();
}

void Telemetry_State_AckermannTelemetry::SharedDtor() {
  if (this != default_instance_) {
    delete closest_trajectory_point_;
    delete velocity_vector_point_;
    delete closest_trajectory_local_point_;
    delete velocity_vector_local_point_;
  }
}

void Telemetry_State_AckermannTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_State_AckermannTelemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_State_AckermannTelemetry_descriptor_;
}

const Telemetry_State_AckermannTelemetry& Telemetry_State_AckermannTelemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_State_AckermannTelemetry* Telemetry_State_AckermannTelemetry::default_instance_ = NULL;

Telemetry_State_AckermannTelemetry* Telemetry_State_AckermannTelemetry::New() const {
  return new Telemetry_State_AckermannTelemetry;
}

void Telemetry_State_AckermannTelemetry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_error_ = 0;
    if (has_closest_trajectory_point()) {
      if (closest_trajectory_point_ != NULL) closest_trajectory_point_->::lunabotics::proto::Point::Clear();
    }
    if (has_velocity_vector_point()) {
      if (velocity_vector_point_ != NULL) velocity_vector_point_->::lunabotics::proto::Point::Clear();
    }
    if (has_closest_trajectory_local_point()) {
      if (closest_trajectory_local_point_ != NULL) closest_trajectory_local_point_->::lunabotics::proto::Point::Clear();
    }
    if (has_velocity_vector_local_point()) {
      if (velocity_vector_local_point_ != NULL) velocity_vector_local_point_->::lunabotics::proto::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_State_AckermannTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pid_error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_error_)));
          set_has_pid_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closest_trajectory_point;
        break;
      }

      // required .lunabotics.proto.Point closest_trajectory_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closest_trajectory_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closest_trajectory_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity_vector_point;
        break;
      }

      // required .lunabotics.proto.Point velocity_vector_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity_vector_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity_vector_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_closest_trajectory_local_point;
        break;
      }

      // required .lunabotics.proto.Point closest_trajectory_local_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closest_trajectory_local_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closest_trajectory_local_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_velocity_vector_local_point;
        break;
      }

      // required .lunabotics.proto.Point velocity_vector_local_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity_vector_local_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity_vector_local_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_State_AckermannTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float pid_error = 1;
  if (has_pid_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pid_error(), output);
  }

  // required .lunabotics.proto.Point closest_trajectory_point = 2;
  if (has_closest_trajectory_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->closest_trajectory_point(), output);
  }

  // required .lunabotics.proto.Point velocity_vector_point = 3;
  if (has_velocity_vector_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity_vector_point(), output);
  }

  // required .lunabotics.proto.Point closest_trajectory_local_point = 4;
  if (has_closest_trajectory_local_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->closest_trajectory_local_point(), output);
  }

  // required .lunabotics.proto.Point velocity_vector_local_point = 5;
  if (has_velocity_vector_local_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->velocity_vector_local_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_State_AckermannTelemetry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float pid_error = 1;
  if (has_pid_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pid_error(), target);
  }

  // required .lunabotics.proto.Point closest_trajectory_point = 2;
  if (has_closest_trajectory_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->closest_trajectory_point(), target);
  }

  // required .lunabotics.proto.Point velocity_vector_point = 3;
  if (has_velocity_vector_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity_vector_point(), target);
  }

  // required .lunabotics.proto.Point closest_trajectory_local_point = 4;
  if (has_closest_trajectory_local_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->closest_trajectory_local_point(), target);
  }

  // required .lunabotics.proto.Point velocity_vector_local_point = 5;
  if (has_velocity_vector_local_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->velocity_vector_local_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_State_AckermannTelemetry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float pid_error = 1;
    if (has_pid_error()) {
      total_size += 1 + 4;
    }

    // required .lunabotics.proto.Point closest_trajectory_point = 2;
    if (has_closest_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closest_trajectory_point());
    }

    // required .lunabotics.proto.Point velocity_vector_point = 3;
    if (has_velocity_vector_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity_vector_point());
    }

    // required .lunabotics.proto.Point closest_trajectory_local_point = 4;
    if (has_closest_trajectory_local_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closest_trajectory_local_point());
    }

    // required .lunabotics.proto.Point velocity_vector_local_point = 5;
    if (has_velocity_vector_local_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity_vector_local_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_State_AckermannTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_State_AckermannTelemetry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_State_AckermannTelemetry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_State_AckermannTelemetry::MergeFrom(const Telemetry_State_AckermannTelemetry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid_error()) {
      set_pid_error(from.pid_error());
    }
    if (from.has_closest_trajectory_point()) {
      mutable_closest_trajectory_point()->::lunabotics::proto::Point::MergeFrom(from.closest_trajectory_point());
    }
    if (from.has_velocity_vector_point()) {
      mutable_velocity_vector_point()->::lunabotics::proto::Point::MergeFrom(from.velocity_vector_point());
    }
    if (from.has_closest_trajectory_local_point()) {
      mutable_closest_trajectory_local_point()->::lunabotics::proto::Point::MergeFrom(from.closest_trajectory_local_point());
    }
    if (from.has_velocity_vector_local_point()) {
      mutable_velocity_vector_local_point()->::lunabotics::proto::Point::MergeFrom(from.velocity_vector_local_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_State_AckermannTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_State_AckermannTelemetry::CopyFrom(const Telemetry_State_AckermannTelemetry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_State_AckermannTelemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_closest_trajectory_point()) {
    if (!this->closest_trajectory_point().IsInitialized()) return false;
  }
  if (has_velocity_vector_point()) {
    if (!this->velocity_vector_point().IsInitialized()) return false;
  }
  if (has_closest_trajectory_local_point()) {
    if (!this->closest_trajectory_local_point().IsInitialized()) return false;
  }
  if (has_velocity_vector_local_point()) {
    if (!this->velocity_vector_local_point().IsInitialized()) return false;
  }
  return true;
}

void Telemetry_State_AckermannTelemetry::Swap(Telemetry_State_AckermannTelemetry* other) {
  if (other != this) {
    std::swap(pid_error_, other->pid_error_);
    std::swap(closest_trajectory_point_, other->closest_trajectory_point_);
    std::swap(velocity_vector_point_, other->velocity_vector_point_);
    std::swap(closest_trajectory_local_point_, other->closest_trajectory_local_point_);
    std::swap(velocity_vector_local_point_, other->velocity_vector_local_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_State_AckermannTelemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_State_AckermannTelemetry_descriptor_;
  metadata.reflection = Telemetry_State_AckermannTelemetry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry_State_PointTurnTelemetry::kStateFieldNumber;
#endif  // !_MSC_VER

Telemetry_State_PointTurnTelemetry::Telemetry_State_PointTurnTelemetry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_State_PointTurnTelemetry::InitAsDefaultInstance() {
}

Telemetry_State_PointTurnTelemetry::Telemetry_State_PointTurnTelemetry(const Telemetry_State_PointTurnTelemetry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_State_PointTurnTelemetry::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_State_PointTurnTelemetry::~Telemetry_State_PointTurnTelemetry() {
  SharedDtor();
}

void Telemetry_State_PointTurnTelemetry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Telemetry_State_PointTurnTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_State_PointTurnTelemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_State_PointTurnTelemetry_descriptor_;
}

const Telemetry_State_PointTurnTelemetry& Telemetry_State_PointTurnTelemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_State_PointTurnTelemetry* Telemetry_State_PointTurnTelemetry::default_instance_ = NULL;

Telemetry_State_PointTurnTelemetry* Telemetry_State_PointTurnTelemetry::New() const {
  return new Telemetry_State_PointTurnTelemetry;
}

void Telemetry_State_PointTurnTelemetry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_State_PointTurnTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lunabotics.proto.Telemetry.PointTurnState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lunabotics::proto::Telemetry_PointTurnState_IsValid(value)) {
            set_state(static_cast< ::lunabotics::proto::Telemetry_PointTurnState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_State_PointTurnTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lunabotics.proto.Telemetry.PointTurnState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_State_PointTurnTelemetry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lunabotics.proto.Telemetry.PointTurnState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_State_PointTurnTelemetry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lunabotics.proto.Telemetry.PointTurnState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_State_PointTurnTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_State_PointTurnTelemetry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_State_PointTurnTelemetry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_State_PointTurnTelemetry::MergeFrom(const Telemetry_State_PointTurnTelemetry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_State_PointTurnTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_State_PointTurnTelemetry::CopyFrom(const Telemetry_State_PointTurnTelemetry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_State_PointTurnTelemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Telemetry_State_PointTurnTelemetry::Swap(Telemetry_State_PointTurnTelemetry* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_State_PointTurnTelemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_State_PointTurnTelemetry_descriptor_;
  metadata.reflection = Telemetry_State_PointTurnTelemetry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry_State::kPositionFieldNumber;
const int Telemetry_State::kHeadingFieldNumber;
const int Telemetry_State::kVelocitiesFieldNumber;
const int Telemetry_State::kSteeringModeFieldNumber;
const int Telemetry_State::kAutonomyEnabledFieldNumber;
const int Telemetry_State::kNextWaypointIdxFieldNumber;
const int Telemetry_State::kIcrFieldNumber;
const int Telemetry_State::kAckermannTelemetryFieldNumber;
const int Telemetry_State::kPointTurnTelemetryFieldNumber;
#endif  // !_MSC_VER

Telemetry_State::Telemetry_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_State::InitAsDefaultInstance() {
  position_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  velocities_ = const_cast< ::lunabotics::proto::Twist*>(&::lunabotics::proto::Twist::default_instance());
  icr_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  ackermann_telemetry_ = const_cast< ::lunabotics::proto::Telemetry_State_AckermannTelemetry*>(&::lunabotics::proto::Telemetry_State_AckermannTelemetry::default_instance());
  point_turn_telemetry_ = const_cast< ::lunabotics::proto::Telemetry_State_PointTurnTelemetry*>(&::lunabotics::proto::Telemetry_State_PointTurnTelemetry::default_instance());
}

Telemetry_State::Telemetry_State(const Telemetry_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_State::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  heading_ = 0;
  velocities_ = NULL;
  steering_mode_ = 1;
  autonomy_enabled_ = false;
  next_waypoint_idx_ = 0;
  icr_ = NULL;
  ackermann_telemetry_ = NULL;
  point_turn_telemetry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_State::~Telemetry_State() {
  SharedDtor();
}

void Telemetry_State::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocities_;
    delete icr_;
    delete ackermann_telemetry_;
    delete point_turn_telemetry_;
  }
}

void Telemetry_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_State_descriptor_;
}

const Telemetry_State& Telemetry_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_State* Telemetry_State::default_instance_ = NULL;

Telemetry_State* Telemetry_State::New() const {
  return new Telemetry_State;
}

void Telemetry_State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::lunabotics::proto::Point::Clear();
    }
    heading_ = 0;
    if (has_velocities()) {
      if (velocities_ != NULL) velocities_->::lunabotics::proto::Twist::Clear();
    }
    steering_mode_ = 1;
    autonomy_enabled_ = false;
    next_waypoint_idx_ = 0;
    if (has_icr()) {
      if (icr_ != NULL) icr_->::lunabotics::proto::Point::Clear();
    }
    if (has_ackermann_telemetry()) {
      if (ackermann_telemetry_ != NULL) ackermann_telemetry_->::lunabotics::proto::Telemetry_State_AckermannTelemetry::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_point_turn_telemetry()) {
      if (point_turn_telemetry_ != NULL) point_turn_telemetry_->::lunabotics::proto::Telemetry_State_PointTurnTelemetry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lunabotics.proto.Point position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_heading;
        break;
      }

      // required float heading = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocities;
        break;
      }

      // required .lunabotics.proto.Twist velocities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steering_mode;
        break;
      }

      // required .lunabotics.proto.SteeringModeType steering_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steering_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lunabotics::proto::SteeringModeType_IsValid(value)) {
            set_steering_mode(static_cast< ::lunabotics::proto::SteeringModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_autonomy_enabled;
        break;
      }

      // required bool autonomy_enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autonomy_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autonomy_enabled_)));
          set_has_autonomy_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_next_waypoint_idx;
        break;
      }

      // optional int32 next_waypoint_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_waypoint_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_waypoint_idx_)));
          set_has_next_waypoint_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_icr;
        break;
      }

      // optional .lunabotics.proto.Point icr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ackermann_telemetry;
        break;
      }

      // optional .lunabotics.proto.Telemetry.State.AckermannTelemetry ackermann_telemetry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ackermann_telemetry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ackermann_telemetry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_point_turn_telemetry;
        break;
      }

      // optional .lunabotics.proto.Telemetry.State.PointTurnTelemetry point_turn_telemetry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_turn_telemetry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point_turn_telemetry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lunabotics.proto.Point position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // required float heading = 2;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // required .lunabotics.proto.Twist velocities = 3;
  if (has_velocities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocities(), output);
  }

  // required .lunabotics.proto.SteeringModeType steering_mode = 4;
  if (has_steering_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->steering_mode(), output);
  }

  // required bool autonomy_enabled = 5;
  if (has_autonomy_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autonomy_enabled(), output);
  }

  // optional int32 next_waypoint_idx = 6;
  if (has_next_waypoint_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_waypoint_idx(), output);
  }

  // optional .lunabotics.proto.Point icr = 7;
  if (has_icr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->icr(), output);
  }

  // optional .lunabotics.proto.Telemetry.State.AckermannTelemetry ackermann_telemetry = 8;
  if (has_ackermann_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ackermann_telemetry(), output);
  }

  // optional .lunabotics.proto.Telemetry.State.PointTurnTelemetry point_turn_telemetry = 9;
  if (has_point_turn_telemetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->point_turn_telemetry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lunabotics.proto.Point position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // required float heading = 2;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // required .lunabotics.proto.Twist velocities = 3;
  if (has_velocities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocities(), target);
  }

  // required .lunabotics.proto.SteeringModeType steering_mode = 4;
  if (has_steering_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->steering_mode(), target);
  }

  // required bool autonomy_enabled = 5;
  if (has_autonomy_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autonomy_enabled(), target);
  }

  // optional int32 next_waypoint_idx = 6;
  if (has_next_waypoint_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->next_waypoint_idx(), target);
  }

  // optional .lunabotics.proto.Point icr = 7;
  if (has_icr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->icr(), target);
  }

  // optional .lunabotics.proto.Telemetry.State.AckermannTelemetry ackermann_telemetry = 8;
  if (has_ackermann_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ackermann_telemetry(), target);
  }

  // optional .lunabotics.proto.Telemetry.State.PointTurnTelemetry point_turn_telemetry = 9;
  if (has_point_turn_telemetry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->point_turn_telemetry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lunabotics.proto.Point position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required float heading = 2;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // required .lunabotics.proto.Twist velocities = 3;
    if (has_velocities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocities());
    }

    // required .lunabotics.proto.SteeringModeType steering_mode = 4;
    if (has_steering_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steering_mode());
    }

    // required bool autonomy_enabled = 5;
    if (has_autonomy_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 next_waypoint_idx = 6;
    if (has_next_waypoint_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_waypoint_idx());
    }

    // optional .lunabotics.proto.Point icr = 7;
    if (has_icr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icr());
    }

    // optional .lunabotics.proto.Telemetry.State.AckermannTelemetry ackermann_telemetry = 8;
    if (has_ackermann_telemetry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ackermann_telemetry());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .lunabotics.proto.Telemetry.State.PointTurnTelemetry point_turn_telemetry = 9;
    if (has_point_turn_telemetry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_turn_telemetry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_State::MergeFrom(const Telemetry_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::lunabotics::proto::Point::MergeFrom(from.position());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_velocities()) {
      mutable_velocities()->::lunabotics::proto::Twist::MergeFrom(from.velocities());
    }
    if (from.has_steering_mode()) {
      set_steering_mode(from.steering_mode());
    }
    if (from.has_autonomy_enabled()) {
      set_autonomy_enabled(from.autonomy_enabled());
    }
    if (from.has_next_waypoint_idx()) {
      set_next_waypoint_idx(from.next_waypoint_idx());
    }
    if (from.has_icr()) {
      mutable_icr()->::lunabotics::proto::Point::MergeFrom(from.icr());
    }
    if (from.has_ackermann_telemetry()) {
      mutable_ackermann_telemetry()->::lunabotics::proto::Telemetry_State_AckermannTelemetry::MergeFrom(from.ackermann_telemetry());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_point_turn_telemetry()) {
      mutable_point_turn_telemetry()->::lunabotics::proto::Telemetry_State_PointTurnTelemetry::MergeFrom(from.point_turn_telemetry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_State::CopyFrom(const Telemetry_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocities()) {
    if (!this->velocities().IsInitialized()) return false;
  }
  if (has_icr()) {
    if (!this->icr().IsInitialized()) return false;
  }
  if (has_ackermann_telemetry()) {
    if (!this->ackermann_telemetry().IsInitialized()) return false;
  }
  if (has_point_turn_telemetry()) {
    if (!this->point_turn_telemetry().IsInitialized()) return false;
  }
  return true;
}

void Telemetry_State::Swap(Telemetry_State* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(heading_, other->heading_);
    std::swap(velocities_, other->velocities_);
    std::swap(steering_mode_, other->steering_mode_);
    std::swap(autonomy_enabled_, other->autonomy_enabled_);
    std::swap(next_waypoint_idx_, other->next_waypoint_idx_);
    std::swap(icr_, other->icr_);
    std::swap(ackermann_telemetry_, other->ackermann_telemetry_);
    std::swap(point_turn_telemetry_, other->point_turn_telemetry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_State_descriptor_;
  metadata.reflection = Telemetry_State_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry_World::kWidthFieldNumber;
const int Telemetry_World::kHeightFieldNumber;
const int Telemetry_World::kResolutionFieldNumber;
const int Telemetry_World::kCellFieldNumber;
#endif  // !_MSC_VER

Telemetry_World::Telemetry_World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_World::InitAsDefaultInstance() {
}

Telemetry_World::Telemetry_World(const Telemetry_World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_World::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_World::~Telemetry_World() {
  SharedDtor();
}

void Telemetry_World::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Telemetry_World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_World_descriptor_;
}

const Telemetry_World& Telemetry_World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_World* Telemetry_World::default_instance_ = NULL;

Telemetry_World* Telemetry_World::New() const {
  return new Telemetry_World;
}

void Telemetry_World::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    resolution_ = 0;
  }
  cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_resolution;
        break;
      }

      // required float resolution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cell;
        break;
      }

      // repeated int32 cell = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cell())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_cell())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required float resolution = 3;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->resolution(), output);
  }

  // repeated int32 cell = 4 [packed = true];
  if (this->cell_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cell_cached_byte_size_);
  }
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required float resolution = 3;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->resolution(), target);
  }

  // repeated int32 cell = 4 [packed = true];
  if (this->cell_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cell_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_World::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required float resolution = 3;
    if (has_resolution()) {
      total_size += 1 + 4;
    }

  }
  // repeated int32 cell = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cell_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cell(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cell_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_World::MergeFrom(const Telemetry_World& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_.MergeFrom(from.cell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_World::CopyFrom(const Telemetry_World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_World::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Telemetry_World::Swap(Telemetry_World* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(resolution_, other->resolution_);
    cell_.Swap(&other->cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_World_descriptor_;
  metadata.reflection = Telemetry_World_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry_Path::kPositionFieldNumber;
#endif  // !_MSC_VER

Telemetry_Path::Telemetry_Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_Path::InitAsDefaultInstance() {
}

Telemetry_Path::Telemetry_Path(const Telemetry_Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_Path::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_Path::~Telemetry_Path() {
  SharedDtor();
}

void Telemetry_Path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Telemetry_Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_Path_descriptor_;
}

const Telemetry_Path& Telemetry_Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_Path* Telemetry_Path::default_instance_ = NULL;

Telemetry_Path* Telemetry_Path::New() const {
  return new Telemetry_Path;
}

void Telemetry_Path::Clear() {
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lunabotics.proto.Point position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_position;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lunabotics.proto.Point position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lunabotics.proto.Point position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_Path::ByteSize() const {
  int total_size = 0;

  // repeated .lunabotics.proto.Point position = 1;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_Path::MergeFrom(const Telemetry_Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_Path::CopyFrom(const Telemetry_Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_Path::IsInitialized() const {

  for (int i = 0; i < position_size(); i++) {
    if (!this->position(i).IsInitialized()) return false;
  }
  return true;
}

void Telemetry_Path::Swap(Telemetry_Path* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_Path_descriptor_;
  metadata.reflection = Telemetry_Path_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Telemetry_LaserScan::Telemetry_LaserScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_LaserScan::InitAsDefaultInstance() {
}

Telemetry_LaserScan::Telemetry_LaserScan(const Telemetry_LaserScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_LaserScan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_LaserScan::~Telemetry_LaserScan() {
  SharedDtor();
}

void Telemetry_LaserScan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Telemetry_LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_LaserScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_LaserScan_descriptor_;
}

const Telemetry_LaserScan& Telemetry_LaserScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_LaserScan* Telemetry_LaserScan::default_instance_ = NULL;

Telemetry_LaserScan* Telemetry_LaserScan::New() const {
  return new Telemetry_LaserScan;
}

void Telemetry_LaserScan::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Telemetry_LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_LaserScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_LaserScan::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_LaserScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_LaserScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_LaserScan::MergeFrom(const Telemetry_LaserScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_LaserScan::CopyFrom(const Telemetry_LaserScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_LaserScan::IsInitialized() const {

  return true;
}

void Telemetry_LaserScan::Swap(Telemetry_LaserScan* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_LaserScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_LaserScan_descriptor_;
  metadata.reflection = Telemetry_LaserScan_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry_Geometry::kLeftFrontJointFieldNumber;
const int Telemetry_Geometry::kLeftRearJointFieldNumber;
const int Telemetry_Geometry::kRightFrontJointFieldNumber;
const int Telemetry_Geometry::kRightRearJointFieldNumber;
const int Telemetry_Geometry::kWheelOffsetFieldNumber;
const int Telemetry_Geometry::kWheelRadiusFieldNumber;
const int Telemetry_Geometry::kWheelWidthFieldNumber;
#endif  // !_MSC_VER

Telemetry_Geometry::Telemetry_Geometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry_Geometry::InitAsDefaultInstance() {
  left_front_joint_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  left_rear_joint_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  right_front_joint_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
  right_rear_joint_ = const_cast< ::lunabotics::proto::Point*>(&::lunabotics::proto::Point::default_instance());
}

Telemetry_Geometry::Telemetry_Geometry(const Telemetry_Geometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry_Geometry::SharedCtor() {
  _cached_size_ = 0;
  left_front_joint_ = NULL;
  left_rear_joint_ = NULL;
  right_front_joint_ = NULL;
  right_rear_joint_ = NULL;
  wheel_offset_ = 0;
  wheel_radius_ = 0;
  wheel_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry_Geometry::~Telemetry_Geometry() {
  SharedDtor();
}

void Telemetry_Geometry::SharedDtor() {
  if (this != default_instance_) {
    delete left_front_joint_;
    delete left_rear_joint_;
    delete right_front_joint_;
    delete right_rear_joint_;
  }
}

void Telemetry_Geometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry_Geometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_Geometry_descriptor_;
}

const Telemetry_Geometry& Telemetry_Geometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry_Geometry* Telemetry_Geometry::default_instance_ = NULL;

Telemetry_Geometry* Telemetry_Geometry::New() const {
  return new Telemetry_Geometry;
}

void Telemetry_Geometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_left_front_joint()) {
      if (left_front_joint_ != NULL) left_front_joint_->::lunabotics::proto::Point::Clear();
    }
    if (has_left_rear_joint()) {
      if (left_rear_joint_ != NULL) left_rear_joint_->::lunabotics::proto::Point::Clear();
    }
    if (has_right_front_joint()) {
      if (right_front_joint_ != NULL) right_front_joint_->::lunabotics::proto::Point::Clear();
    }
    if (has_right_rear_joint()) {
      if (right_rear_joint_ != NULL) right_rear_joint_->::lunabotics::proto::Point::Clear();
    }
    wheel_offset_ = 0;
    wheel_radius_ = 0;
    wheel_width_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry_Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lunabotics.proto.Point left_front_joint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_front_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_left_rear_joint;
        break;
      }

      // required .lunabotics.proto.Point left_rear_joint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_rear_joint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_rear_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right_front_joint;
        break;
      }

      // required .lunabotics.proto.Point right_front_joint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_front_joint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_front_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_right_rear_joint;
        break;
      }

      // required .lunabotics.proto.Point right_rear_joint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_rear_joint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_rear_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_wheel_offset;
        break;
      }

      // required float wheel_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_offset_)));
          set_has_wheel_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_wheel_radius;
        break;
      }

      // required float wheel_radius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_radius_)));
          set_has_wheel_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wheel_width;
        break;
      }

      // required float wheel_width = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wheel_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_width_)));
          set_has_wheel_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry_Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lunabotics.proto.Point left_front_joint = 1;
  if (has_left_front_joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->left_front_joint(), output);
  }

  // required .lunabotics.proto.Point left_rear_joint = 2;
  if (has_left_rear_joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left_rear_joint(), output);
  }

  // required .lunabotics.proto.Point right_front_joint = 3;
  if (has_right_front_joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right_front_joint(), output);
  }

  // required .lunabotics.proto.Point right_rear_joint = 4;
  if (has_right_rear_joint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->right_rear_joint(), output);
  }

  // required float wheel_offset = 5;
  if (has_wheel_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->wheel_offset(), output);
  }

  // required float wheel_radius = 6;
  if (has_wheel_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->wheel_radius(), output);
  }

  // required float wheel_width = 7;
  if (has_wheel_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wheel_width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry_Geometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lunabotics.proto.Point left_front_joint = 1;
  if (has_left_front_joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->left_front_joint(), target);
  }

  // required .lunabotics.proto.Point left_rear_joint = 2;
  if (has_left_rear_joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->left_rear_joint(), target);
  }

  // required .lunabotics.proto.Point right_front_joint = 3;
  if (has_right_front_joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right_front_joint(), target);
  }

  // required .lunabotics.proto.Point right_rear_joint = 4;
  if (has_right_rear_joint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->right_rear_joint(), target);
  }

  // required float wheel_offset = 5;
  if (has_wheel_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->wheel_offset(), target);
  }

  // required float wheel_radius = 6;
  if (has_wheel_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->wheel_radius(), target);
  }

  // required float wheel_width = 7;
  if (has_wheel_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->wheel_width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry_Geometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lunabotics.proto.Point left_front_joint = 1;
    if (has_left_front_joint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_front_joint());
    }

    // required .lunabotics.proto.Point left_rear_joint = 2;
    if (has_left_rear_joint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_rear_joint());
    }

    // required .lunabotics.proto.Point right_front_joint = 3;
    if (has_right_front_joint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_front_joint());
    }

    // required .lunabotics.proto.Point right_rear_joint = 4;
    if (has_right_rear_joint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_rear_joint());
    }

    // required float wheel_offset = 5;
    if (has_wheel_offset()) {
      total_size += 1 + 4;
    }

    // required float wheel_radius = 6;
    if (has_wheel_radius()) {
      total_size += 1 + 4;
    }

    // required float wheel_width = 7;
    if (has_wheel_width()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry_Geometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry_Geometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry_Geometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry_Geometry::MergeFrom(const Telemetry_Geometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_front_joint()) {
      mutable_left_front_joint()->::lunabotics::proto::Point::MergeFrom(from.left_front_joint());
    }
    if (from.has_left_rear_joint()) {
      mutable_left_rear_joint()->::lunabotics::proto::Point::MergeFrom(from.left_rear_joint());
    }
    if (from.has_right_front_joint()) {
      mutable_right_front_joint()->::lunabotics::proto::Point::MergeFrom(from.right_front_joint());
    }
    if (from.has_right_rear_joint()) {
      mutable_right_rear_joint()->::lunabotics::proto::Point::MergeFrom(from.right_rear_joint());
    }
    if (from.has_wheel_offset()) {
      set_wheel_offset(from.wheel_offset());
    }
    if (from.has_wheel_radius()) {
      set_wheel_radius(from.wheel_radius());
    }
    if (from.has_wheel_width()) {
      set_wheel_width(from.wheel_width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry_Geometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry_Geometry::CopyFrom(const Telemetry_Geometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry_Geometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_left_front_joint()) {
    if (!this->left_front_joint().IsInitialized()) return false;
  }
  if (has_left_rear_joint()) {
    if (!this->left_rear_joint().IsInitialized()) return false;
  }
  if (has_right_front_joint()) {
    if (!this->right_front_joint().IsInitialized()) return false;
  }
  if (has_right_rear_joint()) {
    if (!this->right_rear_joint().IsInitialized()) return false;
  }
  return true;
}

void Telemetry_Geometry::Swap(Telemetry_Geometry* other) {
  if (other != this) {
    std::swap(left_front_joint_, other->left_front_joint_);
    std::swap(left_rear_joint_, other->left_rear_joint_);
    std::swap(right_front_joint_, other->right_front_joint_);
    std::swap(right_rear_joint_, other->right_rear_joint_);
    std::swap(wheel_offset_, other->wheel_offset_);
    std::swap(wheel_radius_, other->wheel_radius_);
    std::swap(wheel_width_, other->wheel_width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry_Geometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_Geometry_descriptor_;
  metadata.reflection = Telemetry_Geometry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Telemetry::kStateDataFieldNumber;
const int Telemetry::kWorldDataFieldNumber;
const int Telemetry::kPathDataFieldNumber;
const int Telemetry::kLaserScanDataFieldNumber;
const int Telemetry::kAllWheelStateFieldNumber;
const int Telemetry::kGeometryDataFieldNumber;
#endif  // !_MSC_VER

Telemetry::Telemetry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telemetry::InitAsDefaultInstance() {
  state_data_ = const_cast< ::lunabotics::proto::Telemetry_State*>(&::lunabotics::proto::Telemetry_State::default_instance());
  world_data_ = const_cast< ::lunabotics::proto::Telemetry_World*>(&::lunabotics::proto::Telemetry_World::default_instance());
  path_data_ = const_cast< ::lunabotics::proto::Telemetry_Path*>(&::lunabotics::proto::Telemetry_Path::default_instance());
  laser_scan_data_ = const_cast< ::lunabotics::proto::Telemetry_LaserScan*>(&::lunabotics::proto::Telemetry_LaserScan::default_instance());
  all_wheel_state_ = const_cast< ::lunabotics::proto::AllWheelState*>(&::lunabotics::proto::AllWheelState::default_instance());
  geometry_data_ = const_cast< ::lunabotics::proto::Telemetry_Geometry*>(&::lunabotics::proto::Telemetry_Geometry::default_instance());
}

Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telemetry::SharedCtor() {
  _cached_size_ = 0;
  state_data_ = NULL;
  world_data_ = NULL;
  path_data_ = NULL;
  laser_scan_data_ = NULL;
  all_wheel_state_ = NULL;
  geometry_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telemetry::~Telemetry() {
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != default_instance_) {
    delete state_data_;
    delete world_data_;
    delete path_data_;
    delete laser_scan_data_;
    delete all_wheel_state_;
    delete geometry_data_;
  }
}

void Telemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telemetry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telemetry_descriptor_;
}

const Telemetry& Telemetry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Telemetry_2eproto();
  return *default_instance_;
}

Telemetry* Telemetry::default_instance_ = NULL;

Telemetry* Telemetry::New() const {
  return new Telemetry;
}

void Telemetry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state_data()) {
      if (state_data_ != NULL) state_data_->::lunabotics::proto::Telemetry_State::Clear();
    }
    if (has_world_data()) {
      if (world_data_ != NULL) world_data_->::lunabotics::proto::Telemetry_World::Clear();
    }
    if (has_path_data()) {
      if (path_data_ != NULL) path_data_->::lunabotics::proto::Telemetry_Path::Clear();
    }
    if (has_laser_scan_data()) {
      if (laser_scan_data_ != NULL) laser_scan_data_->::lunabotics::proto::Telemetry_LaserScan::Clear();
    }
    if (has_all_wheel_state()) {
      if (all_wheel_state_ != NULL) all_wheel_state_->::lunabotics::proto::AllWheelState::Clear();
    }
    if (has_geometry_data()) {
      if (geometry_data_ != NULL) geometry_data_->::lunabotics::proto::Telemetry_Geometry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lunabotics.proto.Telemetry.State state_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_world_data;
        break;
      }

      // optional .lunabotics.proto.Telemetry.World world_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path_data;
        break;
      }

      // optional .lunabotics.proto.Telemetry.Path path_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_laser_scan_data;
        break;
      }

      // optional .lunabotics.proto.Telemetry.LaserScan laser_scan_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser_scan_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_scan_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_all_wheel_state;
        break;
      }

      // optional .lunabotics.proto.AllWheelState all_wheel_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_wheel_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_wheel_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_geometry_data;
        break;
      }

      // optional .lunabotics.proto.Telemetry.Geometry geometry_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lunabotics.proto.Telemetry.State state_data = 2;
  if (has_state_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_data(), output);
  }

  // optional .lunabotics.proto.Telemetry.World world_data = 3;
  if (has_world_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->world_data(), output);
  }

  // optional .lunabotics.proto.Telemetry.Path path_data = 4;
  if (has_path_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->path_data(), output);
  }

  // optional .lunabotics.proto.Telemetry.LaserScan laser_scan_data = 5;
  if (has_laser_scan_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->laser_scan_data(), output);
  }

  // optional .lunabotics.proto.AllWheelState all_wheel_state = 6;
  if (has_all_wheel_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->all_wheel_state(), output);
  }

  // optional .lunabotics.proto.Telemetry.Geometry geometry_data = 7;
  if (has_geometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geometry_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telemetry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lunabotics.proto.Telemetry.State state_data = 2;
  if (has_state_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_data(), target);
  }

  // optional .lunabotics.proto.Telemetry.World world_data = 3;
  if (has_world_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->world_data(), target);
  }

  // optional .lunabotics.proto.Telemetry.Path path_data = 4;
  if (has_path_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->path_data(), target);
  }

  // optional .lunabotics.proto.Telemetry.LaserScan laser_scan_data = 5;
  if (has_laser_scan_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->laser_scan_data(), target);
  }

  // optional .lunabotics.proto.AllWheelState all_wheel_state = 6;
  if (has_all_wheel_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->all_wheel_state(), target);
  }

  // optional .lunabotics.proto.Telemetry.Geometry geometry_data = 7;
  if (has_geometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geometry_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telemetry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lunabotics.proto.Telemetry.State state_data = 2;
    if (has_state_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_data());
    }

    // optional .lunabotics.proto.Telemetry.World world_data = 3;
    if (has_world_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_data());
    }

    // optional .lunabotics.proto.Telemetry.Path path_data = 4;
    if (has_path_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_data());
    }

    // optional .lunabotics.proto.Telemetry.LaserScan laser_scan_data = 5;
    if (has_laser_scan_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser_scan_data());
    }

    // optional .lunabotics.proto.AllWheelState all_wheel_state = 6;
    if (has_all_wheel_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_wheel_state());
    }

    // optional .lunabotics.proto.Telemetry.Geometry geometry_data = 7;
    if (has_geometry_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telemetry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telemetry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state_data()) {
      mutable_state_data()->::lunabotics::proto::Telemetry_State::MergeFrom(from.state_data());
    }
    if (from.has_world_data()) {
      mutable_world_data()->::lunabotics::proto::Telemetry_World::MergeFrom(from.world_data());
    }
    if (from.has_path_data()) {
      mutable_path_data()->::lunabotics::proto::Telemetry_Path::MergeFrom(from.path_data());
    }
    if (from.has_laser_scan_data()) {
      mutable_laser_scan_data()->::lunabotics::proto::Telemetry_LaserScan::MergeFrom(from.laser_scan_data());
    }
    if (from.has_all_wheel_state()) {
      mutable_all_wheel_state()->::lunabotics::proto::AllWheelState::MergeFrom(from.all_wheel_state());
    }
    if (from.has_geometry_data()) {
      mutable_geometry_data()->::lunabotics::proto::Telemetry_Geometry::MergeFrom(from.geometry_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {

  if (has_state_data()) {
    if (!this->state_data().IsInitialized()) return false;
  }
  if (has_world_data()) {
    if (!this->world_data().IsInitialized()) return false;
  }
  if (has_path_data()) {
    if (!this->path_data().IsInitialized()) return false;
  }
  if (has_all_wheel_state()) {
    if (!this->all_wheel_state().IsInitialized()) return false;
  }
  if (has_geometry_data()) {
    if (!this->geometry_data().IsInitialized()) return false;
  }
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other != this) {
    std::swap(state_data_, other->state_data_);
    std::swap(world_data_, other->world_data_);
    std::swap(path_data_, other->path_data_);
    std::swap(laser_scan_data_, other->laser_scan_data_);
    std::swap(all_wheel_state_, other->all_wheel_state_);
    std::swap(geometry_data_, other->geometry_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telemetry_descriptor_;
  metadata.reflection = Telemetry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace lunabotics

// @@protoc_insertion_point(global_scope)
