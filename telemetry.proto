import "SteeringModeType.proto";
import "Point.proto";
import "Twist.proto";
import "AllWheelState.proto";

package lunabotics.proto;

message Telemetry {
        enum PointTurnState {
                STOPPED = 1;
                DRIVING = 2;
                TURNING = 3;
        }

    message State {
                required Point position = 1;
                required float heading = 2;
                required Twist velocities = 3;
                required SteeringModeType steering_mode = 4;
                required bool autonomy_enabled = 5;
                optional int32 next_waypoint_idx = 6;
                optional int32 segment_idx = 7;
                optional Point icr = 8;
                optional float min_icr_offset = 9;

                message AckermannTelemetry {
                        required float feedback_error = 1;
						required float feedforward_prediction = 2;
						required float feedforward_curve_radius = 3;
                        required Point feedback_path_point = 4;
                        required Point feedback_point = 5;
                        required Point feedback_path_point_local = 6;
                        required Point feedback_point_local = 7;
                        repeated Point feedforward_points_local = 8;
                        required Point feedforward_center = 9;
                }
                optional AckermannTelemetry ackermann_telemetry = 10;

                message PointTurnTelemetry {
					required PointTurnState state = 1;
				}
				optional PointTurnTelemetry point_turn_telemetry = 11;
    }
    optional State state_data = 2;

    message World {
                required int32 width = 1;
                required int32 height = 2;
                required float resolution = 3;
                repeated int32 cell = 4 [packed = true];
    }
    optional World world_data = 3;

    message Path {
                message Curve {
                            required int32 start_idx = 1;
                            required int32 end_idx = 2;
                            required float curvature = 3;
                }
                repeated Point position = 1;
                repeated Curve curves = 2;
    }
    optional Path path_data = 4;

    message LaserScan {
    }
    optional LaserScan laser_scan_data = 5;

    optional AllWheelState all_wheel_state = 6;

    message Geometry {
                required Point left_front_joint = 1;
                required Point left_rear_joint = 2;
                required Point right_front_joint = 3;
                required Point right_rear_joint = 4;
                required float wheel_offset = 5;
                required float wheel_radius = 6;
                required float wheel_width = 7;
    }
    optional Geometry geometry_data = 7;
}
