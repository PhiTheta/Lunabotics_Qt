// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllWheelState.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllWheelState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lunabotics {

namespace {

const ::google::protobuf::Descriptor* AllWheelState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllWheelState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllWheelState_Wheels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllWheelState_Wheels_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllWheelState_2eproto() {
  protobuf_AddDesc_AllWheelState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllWheelState.proto");
  GOOGLE_CHECK(file != NULL);
  AllWheelState_descriptor_ = file->message_type(0);
  static const int AllWheelState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState, steering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState, driving_),
  };
  AllWheelState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllWheelState_descriptor_,
      AllWheelState::default_instance_,
      AllWheelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllWheelState));
  AllWheelState_Wheels_descriptor_ = AllWheelState_descriptor_->nested_type(0);
  static const int AllWheelState_Wheels_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, left_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, right_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, left_rear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, right_rear_),
  };
  AllWheelState_Wheels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllWheelState_Wheels_descriptor_,
      AllWheelState_Wheels::default_instance_,
      AllWheelState_Wheels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWheelState_Wheels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllWheelState_Wheels));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllWheelState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllWheelState_descriptor_, &AllWheelState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllWheelState_Wheels_descriptor_, &AllWheelState_Wheels::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllWheelState_2eproto() {
  delete AllWheelState::default_instance_;
  delete AllWheelState_reflection_;
  delete AllWheelState_Wheels::default_instance_;
  delete AllWheelState_Wheels_reflection_;
}

void protobuf_AddDesc_AllWheelState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AllWheelState.proto\022\nlunabotics\"\320\001\n\rAl"
    "lWheelState\0222\n\010steering\030\001 \002(\0132 .lunaboti"
    "cs.AllWheelState.Wheels\0221\n\007driving\030\002 \002(\013"
    "2 .lunabotics.AllWheelState.Wheels\032X\n\006Wh"
    "eels\022\022\n\nleft_front\030\001 \002(\002\022\023\n\013right_front\030"
    "\002 \002(\002\022\021\n\tleft_rear\030\003 \002(\002\022\022\n\nright_rear\030\004"
    " \002(\002", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllWheelState.proto", &protobuf_RegisterTypes);
  AllWheelState::default_instance_ = new AllWheelState();
  AllWheelState_Wheels::default_instance_ = new AllWheelState_Wheels();
  AllWheelState::default_instance_->InitAsDefaultInstance();
  AllWheelState_Wheels::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllWheelState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllWheelState_2eproto {
  StaticDescriptorInitializer_AllWheelState_2eproto() {
    protobuf_AddDesc_AllWheelState_2eproto();
  }
} static_descriptor_initializer_AllWheelState_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AllWheelState_Wheels::kLeftFrontFieldNumber;
const int AllWheelState_Wheels::kRightFrontFieldNumber;
const int AllWheelState_Wheels::kLeftRearFieldNumber;
const int AllWheelState_Wheels::kRightRearFieldNumber;
#endif  // !_MSC_VER

AllWheelState_Wheels::AllWheelState_Wheels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllWheelState_Wheels::InitAsDefaultInstance() {
}

AllWheelState_Wheels::AllWheelState_Wheels(const AllWheelState_Wheels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllWheelState_Wheels::SharedCtor() {
  _cached_size_ = 0;
  left_front_ = 0;
  right_front_ = 0;
  left_rear_ = 0;
  right_rear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllWheelState_Wheels::~AllWheelState_Wheels() {
  SharedDtor();
}

void AllWheelState_Wheels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllWheelState_Wheels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllWheelState_Wheels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllWheelState_Wheels_descriptor_;
}

const AllWheelState_Wheels& AllWheelState_Wheels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllWheelState_2eproto();
  return *default_instance_;
}

AllWheelState_Wheels* AllWheelState_Wheels::default_instance_ = NULL;

AllWheelState_Wheels* AllWheelState_Wheels::New() const {
  return new AllWheelState_Wheels;
}

void AllWheelState_Wheels::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_front_ = 0;
    right_front_ = 0;
    left_rear_ = 0;
    right_rear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllWheelState_Wheels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left_front = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_front_)));
          set_has_left_front();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_right_front;
        break;
      }

      // required float right_front = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right_front:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_front_)));
          set_has_right_front();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_left_rear;
        break;
      }

      // required float left_rear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_left_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_rear_)));
          set_has_left_rear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_right_rear;
        break;
      }

      // required float right_rear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right_rear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_rear_)));
          set_has_right_rear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllWheelState_Wheels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float left_front = 1;
  if (has_left_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_front(), output);
  }

  // required float right_front = 2;
  if (has_right_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_front(), output);
  }

  // required float left_rear = 3;
  if (has_left_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->left_rear(), output);
  }

  // required float right_rear = 4;
  if (has_right_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->right_rear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllWheelState_Wheels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float left_front = 1;
  if (has_left_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_front(), target);
  }

  // required float right_front = 2;
  if (has_right_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_front(), target);
  }

  // required float left_rear = 3;
  if (has_left_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->left_rear(), target);
  }

  // required float right_rear = 4;
  if (has_right_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->right_rear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllWheelState_Wheels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float left_front = 1;
    if (has_left_front()) {
      total_size += 1 + 4;
    }

    // required float right_front = 2;
    if (has_right_front()) {
      total_size += 1 + 4;
    }

    // required float left_rear = 3;
    if (has_left_rear()) {
      total_size += 1 + 4;
    }

    // required float right_rear = 4;
    if (has_right_rear()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllWheelState_Wheels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllWheelState_Wheels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllWheelState_Wheels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllWheelState_Wheels::MergeFrom(const AllWheelState_Wheels& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_front()) {
      set_left_front(from.left_front());
    }
    if (from.has_right_front()) {
      set_right_front(from.right_front());
    }
    if (from.has_left_rear()) {
      set_left_rear(from.left_rear());
    }
    if (from.has_right_rear()) {
      set_right_rear(from.right_rear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllWheelState_Wheels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllWheelState_Wheels::CopyFrom(const AllWheelState_Wheels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllWheelState_Wheels::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AllWheelState_Wheels::Swap(AllWheelState_Wheels* other) {
  if (other != this) {
    std::swap(left_front_, other->left_front_);
    std::swap(right_front_, other->right_front_);
    std::swap(left_rear_, other->left_rear_);
    std::swap(right_rear_, other->right_rear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllWheelState_Wheels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllWheelState_Wheels_descriptor_;
  metadata.reflection = AllWheelState_Wheels_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AllWheelState::kSteeringFieldNumber;
const int AllWheelState::kDrivingFieldNumber;
#endif  // !_MSC_VER

AllWheelState::AllWheelState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllWheelState::InitAsDefaultInstance() {
  steering_ = const_cast< ::lunabotics::AllWheelState_Wheels*>(&::lunabotics::AllWheelState_Wheels::default_instance());
  driving_ = const_cast< ::lunabotics::AllWheelState_Wheels*>(&::lunabotics::AllWheelState_Wheels::default_instance());
}

AllWheelState::AllWheelState(const AllWheelState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllWheelState::SharedCtor() {
  _cached_size_ = 0;
  steering_ = NULL;
  driving_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllWheelState::~AllWheelState() {
  SharedDtor();
}

void AllWheelState::SharedDtor() {
  if (this != default_instance_) {
    delete steering_;
    delete driving_;
  }
}

void AllWheelState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllWheelState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllWheelState_descriptor_;
}

const AllWheelState& AllWheelState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllWheelState_2eproto();
  return *default_instance_;
}

AllWheelState* AllWheelState::default_instance_ = NULL;

AllWheelState* AllWheelState::New() const {
  return new AllWheelState;
}

void AllWheelState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_steering()) {
      if (steering_ != NULL) steering_->::lunabotics::AllWheelState_Wheels::Clear();
    }
    if (has_driving()) {
      if (driving_ != NULL) driving_->::lunabotics::AllWheelState_Wheels::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllWheelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lunabotics.AllWheelState.Wheels steering = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steering()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_driving;
        break;
      }

      // required .lunabotics.AllWheelState.Wheels driving = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_driving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driving()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllWheelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lunabotics.AllWheelState.Wheels steering = 1;
  if (has_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->steering(), output);
  }

  // required .lunabotics.AllWheelState.Wheels driving = 2;
  if (has_driving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->driving(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllWheelState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lunabotics.AllWheelState.Wheels steering = 1;
  if (has_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->steering(), target);
  }

  // required .lunabotics.AllWheelState.Wheels driving = 2;
  if (has_driving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->driving(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllWheelState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lunabotics.AllWheelState.Wheels steering = 1;
    if (has_steering()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steering());
    }

    // required .lunabotics.AllWheelState.Wheels driving = 2;
    if (has_driving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->driving());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllWheelState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllWheelState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllWheelState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllWheelState::MergeFrom(const AllWheelState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steering()) {
      mutable_steering()->::lunabotics::AllWheelState_Wheels::MergeFrom(from.steering());
    }
    if (from.has_driving()) {
      mutable_driving()->::lunabotics::AllWheelState_Wheels::MergeFrom(from.driving());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllWheelState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllWheelState::CopyFrom(const AllWheelState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllWheelState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_steering()) {
    if (!this->steering().IsInitialized()) return false;
  }
  if (has_driving()) {
    if (!this->driving().IsInitialized()) return false;
  }
  return true;
}

void AllWheelState::Swap(AllWheelState* other) {
  if (other != this) {
    std::swap(steering_, other->steering_);
    std::swap(driving_, other->driving_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllWheelState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllWheelState_descriptor_;
  metadata.reflection = AllWheelState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lunabotics

// @@protoc_insertion_point(global_scope)
